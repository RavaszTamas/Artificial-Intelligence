My solution uses the madami model for handling the problem.
In the first stage of the algorithm data is read from the input.in, and problem.in, they use a json format.
The system inputs are defined by "experts", outside the program, the fuzzy variables, and their functions,
and the decision matrix.
A the start of the algorithm the given input data is transformed into fuzzy values using the membership functions,
for their correpsonding variable i.e 'humidity',10, so membership function calculates the result for the humidity,
and for all five membership testers a result is obtained.
Next these fuzzy values are further processded unsing the rules, to obtain the fuzzy outputs, for where the, membership is obtained
for each output mebership function, by applying the rules, the crisp values are obtained. Here I also discard any result that is a 0 to make calculations more
effcient.
If all the resulting values are zero, i.e the resulting list is empty, an exception si raised to signal the situation.
Because I use the madami method I will create new membership functions to represent the resulting clipped fuzzy sets.
In this way the new fuzzy sets are clipped, using the crisp values. So the aggregation of the results a new fuzzy set, with different functions,
based on the crisp values.
Given the new set a Center of Area/Gravity is calculated, starting from the predefined domain, inside the system.in until the end,
and the COA is calcualted, and the resulting value is our defuzzified result, which is interpreted by the user/expert.

Step by step example 1:
hunidity: 60, temperature: 23
First all the fuzzy inputs are obtained

humidity: dry: 0, normal: 0.8, wet: 0.2
where max(0,min(1,(50-60)/(50-0))) = 0, dry
where max(0,min((60-0)/(50-0),1,(100-60)/(100-50))) = 0.8
where max(0,min((60-50)/(100-50),1)) = 0.2
temperature: very cold: 0, cold: 0, normal: 0, warm: 0.4, hot: 0

Here similary the membership functions are used to calculate the fuzzy inputs
(Note: in the problem.in where a==b or c==d that means that function is a constant function to +-infinity)


temperature very cold : 0
humidity wet : 0.2
min([0, 0.2]):0
[{'time': 'short'}, 0]
temperature cold : 0
humidity wet : 0.2
min([0, 0.2]):0
[{'time': 'short'}, 0]
temperature normal : 0
humidity wet : 0.2
min([0, 0.2]):0
[{'time': 'short'}, 0]
temperature warm : 0.4
humidity wet : 0.2
min([0.4, 0.2]):0.2
[{'time': 'short'}, 0.2]
temperature hot : 0
humidity wet : 0.2
min([0, 0.2]):0
[{'time': 'medium'}, 0]
temperature very cold : 0
humidity normal : 0.8
min([0, 0.8]):0
[{'time': 'short'}, 0]
temperature cold : 0
humidity normal : 0.8
min([0, 0.8]):0
[{'time': 'medium'}, 0]
temperature normal : 0
humidity normal : 0.8
min([0, 0.8]):0
[{'time': 'medium'}, 0]
temperature warm : 0.4
humidity normal : 0.8
min([0.4, 0.8]):0.4
[{'time': 'medium'}, 0.4]
temperature hot : 0
humidity normal : 0.8
min([0, 0.8]):0
[{'time': 'long'}, 0]
temperature very cold : 0
humidity dry : 0
min([0, 0]):0
[{'time': 'medium'}, 0]
temperature cold : 0
humidity dry : 0
min([0, 0]):0
[{'time': 'long'}, 0]
temperature normal : 0
humidity dry : 0
min([0, 0]):0
[{'time': 'long'}, 0]
temperature warm : 0.4
humidity dry : 0
min([0.4, 0]):0
[{'time': 'long'}, 0]
temperature hot : 0
humidity dry : 0
min([0, 0]):0
[{'time': 'long'}, 0]

The fuzzy outputs are obtained using the rules, note values where 0 is obtained are discarded

Madami method:
With given resulting crisp values the aggregated sets are constructed by creating "new" membership functions,
which will use the crisp values to clip the given fuzzy set, and then these will be aggregated, to create
a resulting fuzzy set.
Then the Center of Area/Gravity is calcualted for the resulting fuzzy set, with a steps size of 1
from 0 to 100

COA:
(0.2 * 0 + 0.2 * 1 + 0.2 * 2 + 0.2 * 3 + 0.2 * 4 + 0.2 * 5 + 0.2 * 6 + 0.2 * 7 + 0.2 * 8 + 0.2 * 9 +
0.2 * 10 + 0.22 * 11 + 0.24 * 12 + 0.26 * 13 + 0.28 * 14 + 0.3 * 15 + 0.32 * 16 + 0.34 * 17 +
0.36 * 18 + 0.38 * 19 + 0.4 * 20 + 0.4 * 21 + 0.4 * 22 + 0.4 * 23 + 0.4 * 24 + 0.4 * 25 + 0.4 * 26 +
0.4 * 27 + 0.4 * 28 + 0.4 * 29 + 0.4 * 30 + 0.4 * 31 + 0.4 * 32 + 0.4 * 33 + 0.4 * 34 + 0.4 * 35 +
0.4 * 36 + 0.4 * 37 + 0.4 * 38 + 0.4 * 39 + 0.4 * 40 + 0.4 * 41 + 0.4 * 42 + 0.4 * 43 + 0.4 * 44 +
0.4 * 45 + 0.4 * 46 + 0.4 * 47 + 0.4 * 48 + 0.4 * 49 + 0.4 * 50 + 0.4 * 51 + 0.4 * 52 + 0.4 * 53 +
0.4 * 54 + 0.4 * 55 + 0.4 * 56 + 0.4 * 57 + 0.4 * 58 + 0.4 * 59 + 0.4 * 60 + 0.4 * 61 + 0.4 * 62 +
0.4 * 63 + 0.4 * 64 + 0.4 * 65 + 0.4 * 66 + 0.4 * 67 + 0.4 * 68 + 0.4 * 69 + 0.4 * 70 + 0.4 * 71 + 
0.4 * 72 + 0.4 * 73 + 0.4 * 74 + 0.4 * 75 + 0.4 * 76 + 0.4 * 77 + 0.4 * 78 + 0.4 * 79 + 0.4 * 80 + 
0.38 * 81 + 0.36 * 82 + 0.34 * 83 + 0.32 * 84 + 0.3 * 85 + 0.28 * 86 + 0.26 * 87 + 0.24 * 88 + 0.22 * 
89 + 0.2 * 90 + 0.18 * 91 + 0.16 * 92 + 0.14 * 93 + 0.12 * 94 + 0.1 * 95 + 0.08 * 96 + 0.06 * 97 + 0.04 * 
98 + 0.02 * 99 + 0 * 100)/(0.2 + 0.2 + 0.2 + 0.2 + 0.2 + 0.2 + 0.2 + 0.2 + 0.2 + 0.2 + 0.2 + 0.22 + 0.24 + 
0.26 + 0.28 + 0.3 + 0.32 + 0.34 + 0.36 + 0.38 + 0.4 + 0.4 + 0.4 + 0.4 + 0.4 + 0.4 + 0.4 + 0.4 + 0.4 + 0.4 +
0.4 + 0.4 + 0.4 + 0.4 + 0.4 + 0.4 + 0.4 + 0.4 + 0.4 + 0.4 + 0.4 + 0.4 + 0.4 + 0.4 + 0.4 + 0.4 + 0.4 + 0.4 + 
0.4 + 0.4 + 0.4 + 0.4 + 0.4 + 0.4 + 0.4 + 0.4 + 0.4 + 0.4 + 0.4 + 0.4 + 0.4 + 0.4 + 0.4 + 0.4 + 0.4 + 0.4 + 
0.4 + 0.4 + 0.4 + 0.4 + 0.4 + 0.4 + 0.4 + 0.4 + 0.4 + 0.4 + 0.4 + 0.4 + 0.4 + 0.4 + 0.4 + 0.38 + 0.36 + 0.34 + 
0.32 + 0.3 + 0.28 + 0.26 + 0.24 + 0.22 + 0.2 + 0.18 + 0.16 + 0.14 + 0.12 + 0.1 + 0.08 + 0.06 + 0.04 + 0.02 + 0)

The estimated result is:

COA = 48.43806646525686


Example 2
humidity: 10, temperature: 30
humidity: dry: 0.8, normal: 0.2, wet: 0
where max(0,min(1,(50-10)/(50-0))) = 0, dry
where max(0,min((10-0)/(50-0),1,(100-10)/(100-50))) = 0.8
where max(0,min((10-50)/(100-50),1)) = 0.2
temperature: very cold: 0, cold: 0, normal: 0, warm: 0, hot: 1.0

Similarly the fuzzy inputs are obtained

temperature very cold : 0
humidity wet : 0
min([0, 0]):0
[{'time': 'short'}, 0]
temperature cold : 0
humidity wet : 0
min([0, 0]):0
[{'time': 'short'}, 0]
temperature normal : 0
humidity wet : 0
min([0, 0]):0
[{'time': 'short'}, 0]
temperature warm : 0
humidity wet : 0
min([0, 0]):0
[{'time': 'short'}, 0]
temperature hot : 1.0
humidity wet : 0
min([1.0, 0]):0
[{'time': 'medium'}, 0]
temperature very cold : 0
humidity normal : 0.2
min([0, 0.2]):0
[{'time': 'short'}, 0]
temperature cold : 0
humidity normal : 0.2
min([0, 0.2]):0
[{'time': 'medium'}, 0]
temperature normal : 0
humidity normal : 0.2
min([0, 0.2]):0
[{'time': 'medium'}, 0]
temperature warm : 0
humidity normal : 0.2
min([0, 0.2]):0
[{'time': 'medium'}, 0]
temperature hot : 1.0
humidity normal : 0.2
min([1.0, 0.2]):0.2
[{'time': 'long'}, 0.2]
temperature very cold : 0
humidity dry : 0.8
min([0, 0.8]):0
[{'time': 'medium'}, 0]
temperature cold : 0
humidity dry : 0.8
min([0, 0.8]):0
[{'time': 'long'}, 0]
temperature normal : 0
humidity dry : 0.8
min([0, 0.8]):0
[{'time': 'long'}, 0]
temperature warm : 0
humidity dry : 0.8
min([0, 0.8]):0
[{'time': 'long'}, 0]
temperature hot : 1.0
humidity dry : 0.8
min([1.0, 0.8]):0.8
[{'time': 'long'}, 0.8]

The fuzzy outputs are obtained using the rules, note values where 0 is obtained are discarded

Madami method:
With given resulting crisp values the aggregated sets are constructed by creating "new" membership functions,
which will use the crisp values to clip the given fuzzy set, and then these will be aggregated, to create
a resulting fuzzy set.
Then the Center of Area/Gravity is calcualted for the resulting fuzzy set, with a steps size of 1
from 0 to 100

COA:
(0 * 0 + 0 * 1 + 0 * 2 + 0 * 3 + 0 * 4 + 0 * 5 + 0 * 6 + 0 * 7 + 0 * 8 + 0 * 9 + 0 * 10 + 
0 * 11 + 0 * 12 + 0 * 13 + 0 * 14 + 0 * 15 + 0 * 16 + 0 * 17 + 0 * 18 + 0 * 19 + 0 * 20 + 
0 * 21 + 0 * 22 + 0 * 23 + 0 * 24 + 0 * 25 + 0 * 26 + 0 * 27 + 0 * 28 + 0 * 29 + 0 * 30 + 
0 * 31 + 0 * 32 + 0 * 33 + 0 * 34 + 0 * 35 + 0 * 36 + 0 * 37 + 0 * 38 + 0 * 39 + 0 * 40 + 
0 * 41 + 0 * 42 + 0 * 43 + 0 * 44 + 0 * 45 + 0 * 46 + 0 * 47 + 0 * 48 + 0 * 49 + 0 * 50 + 
0.02 * 51 + 0.04 * 52 + 0.06 * 53 + 0.08 * 54 + 0.1 * 55 + 0.12 * 56 + 0.14 * 57 + 0.16 * 58 + 
0.18 * 59 + 0.2 * 60 + 0.22 * 61 + 0.24 * 62 + 0.26 * 63 + 0.28 * 64 + 0.3 * 65 + 0.32 * 66 + 
0.34 * 67 + 0.36 * 68 + 0.38 * 69 + 0.4 * 70 + 0.42 * 71 + 0.44 * 72 + 0.46 * 73 + 0.48 * 74 + 
0.5 * 75 + 0.52 * 76 + 0.54 * 77 + 0.56 * 78 + 0.58 * 79 + 0.6 * 80 + 0.62 * 81 + 0.64 * 82 + 
0.66 * 83 + 0.68 * 84 + 0.7 * 85 + 0.72 * 86 + 0.74 * 87 + 0.76 * 88 + 0.78 * 89 + 0.8 * 90 + 
0.8 * 91 + 0.8 * 92 + 0.8 * 93 + 0.8 * 94 + 0.8 * 95 + 0.8 * 96 + 0.8 * 97 + 0.8 * 98 + 0.8 * 99 + 
0.8 * 100)/(0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 
0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 
0 + 0 + 0 + 0 + 0.02 + 0.04 + 0.06 + 0.08 + 0.1 + 0.12 + 0.14 + 0.16 + 0.18 + 0.2 + 0.22 + 0.24 + 
0.26 + 0.28 + 0.3 + 0.32 + 0.34 + 0.36 + 0.38 + 0.4 + 0.42 + 0.44 + 0.46 + 0.48 + 0.5 + 0.52 + 0.54 + 
0.56 + 0.58 + 0.6 + 0.62 + 0.64 + 0.66 + 0.68 + 0.7 + 0.72 + 0.74 + 0.76 + 0.78 + 0.8 + 0.8 + 0.8 + 
0.8 + 0.8 + 0.8 + 0.8 + 0.8 + 0.8 + 0.8 + 0.8)

The estimated result is:

COA = 83.0655737704918
